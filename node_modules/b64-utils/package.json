{
  "name": "b64-utils",
  "version": "0.1.1",
  "description": "Simple Base64 methods (encode, decode) using Built In buffers. This means its just an abstraction and will be as reliable as nodejs buffers are.",
  "main": "index.js",
  "scripts": {
    "test": "DEBUG=* node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/miketheprogrammer/b64.git"
  },
  "keywords": [
    "base64",
    "b64",
    "encode",
    "decode",
    "buffer"
  ],
  "testling": {
    "files": "test.js",
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "author": {
    "name": "Michael Hernandez -- michael.hernandez1988@gmail.com"
  },
  "license": "MIT License",
  "bugs": {
    "url": "https://github.com/miketheprogrammer/b64/issues"
  },
  "homepage": "https://github.com/miketheprogrammer/b64",
  "devDependencies": {
    "debug": "~0.7.4",
    "tape": "~2.4.2"
  },
  "readme": "b64\n===\n\nSimple Base64 methods using Built In buffers. This means its just an abstraction and will be as reliable as nodejs buffers are.\n\n\n[![browser support](https://ci.testling.com/miketheprogrammer/b64.png)](https://ci.testling.com/miketheprogrammer/b64)\n\n\nnpm install b64-utils\n\nThis library is just a small quick stable library to clean up all the new Buffer( blah ).toString() blah.\n\nWorks well for me especially when doing alot of b64 work with crypto, on enterprise api's where security is insane.\n\nTests are the documentation. Enjoy\n\n```javascript\n\n\nvar test = require('tape');\nvar b64 = require('./index');\n\ntest('Encoding should work as expected', function (t) {\n    t.plan(1);\n    var expect = 'aGVsbG8gd29ybGQ=';\n\n    //input value, input format\n    var result = b64.encode('hello world', 'ascii');\n\n    t.equals(result, expect);\n});\n\ntest('Decoding should work as expected', function (t) {\n    t.plan(1)\n    var expect = 'hello world';\n\n    // input value, output format\n    var result = b64.decode('aGVsbG8gd29ybGQ=', 'ascii');\n\n    t.equals(result, expect);\n});\n\ntest('Encoding Buffers should still work as expected', function(t) {\n    t.plan(1);\n\n    var expect = 'aGVsbG8gd29ybGQ=';\n\n    // please note that the second argument is ignored here, since the buffer is already raw byte data;\n    var result = b64.encode(new Buffer('hello world'));\n\n    t.equals(result, expect);;\n});\n\ntest('Decoding Buffers should still work as expected', function(t) {\n    t.plan(1);\n\n    var expect = 'hello world';\n\n    var result = b64.decode(new Buffer('aGVsbG8gd29ybGQ='), 'ascii');\n\n    t.equals(result, expect);\n})\n\n```",
  "readmeFilename": "README.md",
  "_id": "b64-utils@0.1.1",
  "dist": {
    "shasum": "e96839012ef385f2c2e36dc193efc97a46eccd14"
  },
  "_from": "b64-utils@",
  "_resolved": "https://registry.npmjs.org/b64-utils/-/b64-utils-0.1.1.tgz"
}
